// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go

// Package usecases is a generated GoMock package.
package usecases

import (
	entities "TaskManager/internal/entities"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCreateTaskTaskManager is a mock of CreateTaskTaskManager interface.
type MockCreateTaskTaskManager struct {
	ctrl     *gomock.Controller
	recorder *MockCreateTaskTaskManagerMockRecorder
}

// MockCreateTaskTaskManagerMockRecorder is the mock recorder for MockCreateTaskTaskManager.
type MockCreateTaskTaskManagerMockRecorder struct {
	mock *MockCreateTaskTaskManager
}

// NewMockCreateTaskTaskManager creates a new mock instance.
func NewMockCreateTaskTaskManager(ctrl *gomock.Controller) *MockCreateTaskTaskManager {
	mock := &MockCreateTaskTaskManager{ctrl: ctrl}
	mock.recorder = &MockCreateTaskTaskManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateTaskTaskManager) EXPECT() *MockCreateTaskTaskManagerMockRecorder {
	return m.recorder
}

// SubmitTask mocks base method.
func (m *MockCreateTaskTaskManager) SubmitTask(task *entities.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitTask indicates an expected call of SubmitTask.
func (mr *MockCreateTaskTaskManagerMockRecorder) SubmitTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTask", reflect.TypeOf((*MockCreateTaskTaskManager)(nil).SubmitTask), task)
}

// MockCreateTaskRepository is a mock of CreateTaskRepository interface.
type MockCreateTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCreateTaskRepositoryMockRecorder
}

// MockCreateTaskRepositoryMockRecorder is the mock recorder for MockCreateTaskRepository.
type MockCreateTaskRepositoryMockRecorder struct {
	mock *MockCreateTaskRepository
}

// NewMockCreateTaskRepository creates a new mock instance.
func NewMockCreateTaskRepository(ctrl *gomock.Controller) *MockCreateTaskRepository {
	mock := &MockCreateTaskRepository{ctrl: ctrl}
	mock.recorder = &MockCreateTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateTaskRepository) EXPECT() *MockCreateTaskRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockCreateTaskRepository) Insert(context context.Context, task *entities.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", context, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockCreateTaskRepositoryMockRecorder) Insert(context, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCreateTaskRepository)(nil).Insert), context, task)
}

// MockDeleteTaskRepository is a mock of DeleteTaskRepository interface.
type MockDeleteTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteTaskRepositoryMockRecorder
}

// MockDeleteTaskRepositoryMockRecorder is the mock recorder for MockDeleteTaskRepository.
type MockDeleteTaskRepositoryMockRecorder struct {
	mock *MockDeleteTaskRepository
}

// NewMockDeleteTaskRepository creates a new mock instance.
func NewMockDeleteTaskRepository(ctrl *gomock.Controller) *MockDeleteTaskRepository {
	mock := &MockDeleteTaskRepository{ctrl: ctrl}
	mock.recorder = &MockDeleteTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteTaskRepository) EXPECT() *MockDeleteTaskRepositoryMockRecorder {
	return m.recorder
}

// DeleteTask mocks base method.
func (m *MockDeleteTaskRepository) DeleteTask(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockDeleteTaskRepositoryMockRecorder) DeleteTask(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockDeleteTaskRepository)(nil).DeleteTask), ctx, id)
}

// SelectByID mocks base method.
func (m *MockDeleteTaskRepository) SelectByID(ctx context.Context, id string) (entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", ctx, id)
	ret0, _ := ret[0].(entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID.
func (mr *MockDeleteTaskRepositoryMockRecorder) SelectByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockDeleteTaskRepository)(nil).SelectByID), ctx, id)
}

// MockDeleteTaskTaskManager is a mock of DeleteTaskTaskManager interface.
type MockDeleteTaskTaskManager struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteTaskTaskManagerMockRecorder
}

// MockDeleteTaskTaskManagerMockRecorder is the mock recorder for MockDeleteTaskTaskManager.
type MockDeleteTaskTaskManagerMockRecorder struct {
	mock *MockDeleteTaskTaskManager
}

// NewMockDeleteTaskTaskManager creates a new mock instance.
func NewMockDeleteTaskTaskManager(ctrl *gomock.Controller) *MockDeleteTaskTaskManager {
	mock := &MockDeleteTaskTaskManager{ctrl: ctrl}
	mock.recorder = &MockDeleteTaskTaskManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteTaskTaskManager) EXPECT() *MockDeleteTaskTaskManagerMockRecorder {
	return m.recorder
}

// CancelTask mocks base method.
func (m *MockDeleteTaskTaskManager) CancelTask(taskID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CancelTask", taskID)
}

// CancelTask indicates an expected call of CancelTask.
func (mr *MockDeleteTaskTaskManagerMockRecorder) CancelTask(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTask", reflect.TypeOf((*MockDeleteTaskTaskManager)(nil).CancelTask), taskID)
}

// MockGetTaskRepository is a mock of GetTaskRepository interface.
type MockGetTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetTaskRepositoryMockRecorder
}

// MockGetTaskRepositoryMockRecorder is the mock recorder for MockGetTaskRepository.
type MockGetTaskRepositoryMockRecorder struct {
	mock *MockGetTaskRepository
}

// NewMockGetTaskRepository creates a new mock instance.
func NewMockGetTaskRepository(ctrl *gomock.Controller) *MockGetTaskRepository {
	mock := &MockGetTaskRepository{ctrl: ctrl}
	mock.recorder = &MockGetTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetTaskRepository) EXPECT() *MockGetTaskRepositoryMockRecorder {
	return m.recorder
}

// SelectByID mocks base method.
func (m *MockGetTaskRepository) SelectByID(ctx context.Context, id string) (entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", ctx, id)
	ret0, _ := ret[0].(entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID.
func (mr *MockGetTaskRepositoryMockRecorder) SelectByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockGetTaskRepository)(nil).SelectByID), ctx, id)
}

// MockGetTasksRepository is a mock of GetTasksRepository interface.
type MockGetTasksRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetTasksRepositoryMockRecorder
}

// MockGetTasksRepositoryMockRecorder is the mock recorder for MockGetTasksRepository.
type MockGetTasksRepositoryMockRecorder struct {
	mock *MockGetTasksRepository
}

// NewMockGetTasksRepository creates a new mock instance.
func NewMockGetTasksRepository(ctrl *gomock.Controller) *MockGetTasksRepository {
	mock := &MockGetTasksRepository{ctrl: ctrl}
	mock.recorder = &MockGetTasksRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetTasksRepository) EXPECT() *MockGetTasksRepositoryMockRecorder {
	return m.recorder
}

// SelectAll mocks base method.
func (m *MockGetTasksRepository) SelectAll(ctx context.Context, limit, offset int) ([]entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAll", ctx, limit, offset)
	ret0, _ := ret[0].([]entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAll indicates an expected call of SelectAll.
func (mr *MockGetTasksRepositoryMockRecorder) SelectAll(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAll", reflect.TypeOf((*MockGetTasksRepository)(nil).SelectAll), ctx, limit, offset)
}
